#include "DBG_Log.h"
extern "C" {
#include "ViceWrapper.h"
};
#include "C64Palette.h"
#include "CSlrString.h"

std::vector<C64PaletteData *> c64AvailablePalettes;

uint8 c64d_palette_c64_color_codes[] = {
	0x00, 0x00, 0x00,
	0x01, 0x01, 0x01,
	0x02, 0x02, 0x02,
	0x03, 0x03, 0x03,
	0x04, 0x04, 0x04,
	0x05, 0x05, 0x05,
	0x06, 0x06, 0x06,
	0x07, 0x07, 0x07,
	0x08, 0x08, 0x08,
	0x09, 0x09, 0x09,
	0x0A, 0x0A, 0x0A,
	0x0B, 0x0B, 0x0B,
	0x0C, 0x0C, 0x0C,
	0x0D, 0x0D, 0x0D,
	0x0E, 0x0E, 0x0E,
	0x0F, 0x0F, 0x0F,
};

void C64SetPalette(const char *paletteName)
{
	for (std::vector<C64PaletteData *>::iterator it = c64AvailablePalettes.begin(); it != c64AvailablePalettes.end(); it++)
	{
		C64PaletteData *paletteData = *it;
		if (!strcmp(paletteName, paletteData->paletteName))
		{
			C64SetVicePalette(paletteData->palette);
		}
	}
}

void C64SetPaletteNum(uint16 paletteNum)
{
	if (paletteNum < c64AvailablePalettes.size())
	{
		c64d_set_palette_vice(c64AvailablePalettes[paletteNum]->palette);
	}
}


void C64SetPalette(uint8 *palette)
{
	c64d_set_palette(palette);
}

void C64SetVicePalette(uint8 *palette)
{
	c64d_set_palette_vice(palette);
}

void C64GetAvailablePalettes(std::vector<const char *> *vicPalettes)
{
	for (std::vector<C64PaletteData *>::iterator it = c64AvailablePalettes.begin(); it != c64AvailablePalettes.end(); it++)
	{
		C64PaletteData *paletteData = *it;
		vicPalettes->push_back(paletteData->paletteName);
	}
}

void C64GetAvailablePalettes(std::vector<CSlrString *> *vicPalettes)
{
	for (std::vector<C64PaletteData *>::iterator it = c64AvailablePalettes.begin(); it != c64AvailablePalettes.end(); it++)
	{
		C64PaletteData *paletteData = *it;
		vicPalettes->push_back(new CSlrString(paletteData->paletteName));
	}
}

void C64SetPaletteOriginalColorCodes()
{
	LOGD("C64SetPaletteOriginalColorCodes");
	c64d_set_palette(c64d_palette_c64_color_codes);
}

C64PaletteData::C64PaletteData(const char *paletteName, uint8 *palette)
{
	this->paletteName = paletteName;
	this->palette = palette;
}

// TODO: use vice palettes (merging from 2.4 to 3.1)
uint8 c64d_vicii_colodore_vpl[] = {
	0x00, 0x00, 0x00, 0x0F,
	0xFF, 0xFF, 0xFF, 0x0F,
	0x81, 0x33, 0x38, 0x0F,
	0x75, 0xCE, 0xC8, 0x0F,
	0x8E, 0x3C, 0x97, 0x0F,
	0x56, 0xAC, 0x4D, 0x0F,
	0x2E, 0x2C, 0x9B, 0x0F,
	0xED, 0xF1, 0x71, 0x0F,
	0x8E, 0x50, 0x29, 0x0F,
	0x55, 0x38, 0x00, 0x0F,
	0xC4, 0x6C, 0x71, 0x0F,
	0x4A, 0x4A, 0x4A, 0x0F,
	0x7B, 0x7B, 0x7B, 0x0F,
	0xA9, 0xFF, 0x9F, 0x0F,
	0x70, 0x6D, 0xEB, 0x0F,
	0xB2, 0xB2, 0xB2, 0x0F
};

uint8 c64d_vicii_PALette_vpl[] = {
	0x00, 0x00, 0x00, 0x0F,
	0xd5, 0xd5, 0xd5, 0x0F,
	0x72, 0x35, 0x2c, 0x0F,
	0x65, 0x9f, 0xa6, 0x0F,
	0x73, 0x3a, 0x91, 0x0F,
	0x56, 0x8d, 0x35, 0x0F,
	0x2e, 0x23, 0x7d, 0x0F,
	0xae, 0xb7, 0x5e, 0x0F,
	0x77, 0x4f, 0x1e, 0x0F,
	0x4b, 0x3c, 0x00, 0x0F,
	0x9c, 0x63, 0x5a, 0x0F,
	0x47, 0x47, 0x47, 0x0F,
	0x6b, 0x6b, 0x6b, 0x0F,
	0x8f, 0xc2, 0x71, 0x0F,
	0x67, 0x5d, 0xb6, 0x0F,
	0x8f, 0x8f, 0x8f, 0x0F
};

uint8 c64d_vicii_frodo2_vpl[] = {
	0x00, 0x00, 0x00, 0x0F,
	0xFF, 0xFF, 0xFF, 0x0F,
	0x99, 0x00, 0x00, 0x0F,
	0x00, 0xFF, 0xCC, 0x0F,
	0xCC, 0x00, 0xCC, 0x0F,
	0x44, 0xCC, 0x44, 0x0F,
	0x11, 0x00, 0x99, 0x0F,
	0xFF, 0xFF, 0x00, 0x0F,
	0xAA, 0x55, 0x00, 0x0F,
	0x66, 0x33, 0x00, 0x0F,
	0xFF, 0x66, 0x66, 0x0F,
	0x40, 0x40, 0x40, 0x0F,
	0x80, 0x80, 0x80, 0x0F,
	0x66, 0xFF, 0x66, 0x0F,
	0x77, 0x77, 0xFF, 0x0F,
	0xC0, 0xC0, 0xC0, 0x0F
};

uint8 c64d_vicii_c64hq_vpl[] = {
	0x0A, 0x0A, 0x0A, 0x0,
	0xFF, 0xF8, 0xFF, 0xE,
	0x85, 0x1F, 0x02, 0x4,
	0x65, 0xCD, 0xA8, 0xC,
	0xA7, 0x3B, 0x9F, 0x8,
	0x4D, 0xAB, 0x19, 0x4,
	0x1A, 0x0C, 0x92, 0x4,
	0xEB, 0xE3, 0x53, 0xC,
	0xA9, 0x4B, 0x02, 0x4,
	0x44, 0x1E, 0x00, 0x4,
	0xD2, 0x80, 0x74, 0x4,
	0x46, 0x46, 0x46, 0x4,
	0x8B, 0x8B, 0x8B, 0x8,
	0x8E, 0xF6, 0x8E, 0x8,
	0x4D, 0x91, 0xD1, 0x8,
	0xBA, 0xBA, 0xBA, 0xC
};

uint8 c64d_vicii_c64s_vpl[] = {
	0x00, 0x00, 0x00, 0x0,
	0xFC, 0xFC, 0xFC, 0xE,
	0xA8, 0x00, 0x00, 0x4,
	0x54, 0xFC, 0xFC, 0xC,
	0xA8, 0x00, 0xA8, 0x8,
	0x00, 0xA8, 0x00, 0x4,
	0x00, 0x00, 0xA8, 0x4,
	0xFC, 0xFC, 0x00, 0xC,
	0xA8, 0x54, 0x00, 0x4,
	0x80, 0x2C, 0x00, 0x4,
	0xFC, 0x54, 0x54, 0x8,
	0x54, 0x54, 0x54, 0x4,
	0x80, 0x80, 0x80, 0x8,
	0x54, 0xFC, 0x54, 0x8,
	0x54, 0x54, 0xFC, 0x8,
	0xA8, 0xA8, 0xA8, 0xC,
};

uint8 c64d_vicii_ccs64_vpl[] = {
	0x10, 0x10, 0x10, 0x0,
	0xFF, 0xFF, 0xFF, 0xE,
	0xE0, 0x40, 0x40, 0x4,
	0x60, 0xFF, 0xFF, 0xC,
	0xE0, 0x60, 0xE0, 0x8,
	0x40, 0xE0, 0x40, 0x4,
	0x40, 0x40, 0xE0, 0x4,
	0xFF, 0xFF, 0x40, 0xC,
	0xE0, 0xA0, 0x40, 0x4,
	0x9C, 0x74, 0x48, 0x4,
	0xFF, 0xA0, 0xA0, 0x8,
	0x54, 0x54, 0x54, 0x4,
	0x88, 0x88, 0x88, 0x8,
	0xA0, 0xFF, 0xA0, 0x8,
	0xA0, 0xA0, 0xFF, 0x8,
	0xC0, 0xC0, 0xC0, 0xC
};

uint8 c64d_vicii_community_colors_vpl[] = {
	0x00, 0x00, 0x00, 0x0,
	0xff, 0xff, 0xff, 0xe,
	0xaf, 0x2a, 0x29, 0x4,
	0x62, 0xd8, 0xcc, 0xc,
	0xb0, 0x3f, 0xb6, 0x8,
	0x4a, 0xc6, 0x4a, 0x4,
	0x37, 0x39, 0xc4, 0x4,
	0xe4, 0xed, 0x4e, 0xc,
	0xb6, 0x59, 0x1c, 0x4,
	0x68, 0x38, 0x08, 0x4,
	0xea, 0x74, 0x6c, 0x8,
	0x4d, 0x4d, 0x4d, 0x4,
	0x84, 0x84, 0x84, 0x8,
	0xa6, 0xfa, 0x9e, 0x8,
	0x70, 0x7c, 0xe6, 0x8,
	0xb6, 0xb6, 0xb5, 0xc
};

uint8 c64d_vicii_godot_vpl[] = {
	0x00, 0x00, 0x00, 0x0,
	0xFF, 0xFF, 0xFF, 0xE,
	0x88, 0x00, 0x00, 0x4,
	0xAA, 0xFF, 0xEE, 0xC,
	0xCC, 0x44, 0xCC, 0x8,
	0x00, 0xCC, 0x55, 0x4,
	0x00, 0x00, 0xAA, 0x4,
	0xEE, 0xEE, 0x77, 0xC,
	0xDD, 0x88, 0x55, 0x4,
	0x66, 0x44, 0x00, 0x4,
	0xFE, 0x77, 0x77, 0x8,
	0x33, 0x33, 0x33, 0x4,
	0x77, 0x77, 0x77, 0x8,
	0xAA, 0xFF, 0x66, 0x8,
	0x00, 0x88, 0xFF, 0x8,
	0xBB, 0xBB, 0xBB, 0xC
};

uint8 c64d_vicii_pc64_vpl[] = {
	0x21, 0x21, 0x21, 0x0,
	0xFF, 0xFF, 0xFF, 0xE,
	0xB5, 0x21, 0x21, 0x4,
	0x73, 0xFF, 0xFF, 0xC,
	0xB5, 0x21, 0xB5, 0x8,
	0x21, 0xB5, 0x21, 0x4,
	0x21, 0x21, 0xB5, 0x4,
	0xFF, 0xFF, 0x21, 0xC,
	0xB5, 0x73, 0x21, 0x4,
	0x94, 0x42, 0x21, 0x4,
	0xFF, 0x73, 0x73, 0x8,
	0x73, 0x73, 0x73, 0x4,
	0x94, 0x94, 0x94, 0x8,
	0x73, 0xFF, 0x73, 0x8,
	0x73, 0x73, 0xFF, 0x8,
	0xB5, 0xB5, 0xB5, 0xC
};

uint8 c64d_vicii_pepto_ntsc_sony_vpl[] = {
	0x00, 0x00, 0x00, 0x0,
	0xFF, 0xFF, 0xFF, 0xE,
	0x7C, 0x35, 0x2B, 0x4,
	0x5A, 0xA6, 0xB1, 0xC,
	0x69, 0x41, 0x85, 0x8,
	0x5D, 0x86, 0x43, 0x4,
	0x21, 0x2E, 0x78, 0x4,
	0xCF, 0xBE, 0x6F, 0xC,
	0x89, 0x4A, 0x26, 0x4,
	0x5B, 0x33, 0x0 , 0x0,
	0xAF, 0x64, 0x59, 0x8,
	0x43, 0x43, 0x43, 0x4,
	0x6B, 0x6B, 0x6B, 0x8,
	0xA0, 0xCB, 0x84, 0x8,
	0x56, 0x65, 0xB3, 0x8,
	0x95, 0x95, 0x95, 0xC
};


uint8 c64d_vicii_pepto_ntsc_vpl[] = {
	0x0 , 0x0 , 0x0 , 0x0,
	0xFF, 0xFF, 0xFF, 0xE,
	0x67, 0x37, 0x2B, 0x4,
	0x70, 0xA3, 0xB1, 0xC,
	0x6F, 0x3D, 0x86, 0x8,
	0x58, 0x8C, 0x42, 0x4,
	0x34, 0x28, 0x79, 0x4,
	0xB7, 0xC6, 0x6E, 0xC,
	0x6F, 0x4E, 0x25, 0x4,
	0x42, 0x38, 0x0 , 0x4,
	0x99, 0x66, 0x59, 0x8,
	0x43, 0x43, 0x43, 0x4,
	0x6B, 0x6B, 0x6B, 0x8,
	0x9A, 0xD1, 0x83, 0x8,
	0x6B, 0x5E, 0xB5, 0x8,
	0x95, 0x95, 0x95, 0xC
};

uint8 c64d_vicii_pepto_pal_vpl[] = {
	0x00, 0x00, 0x00, 0x0,
	0xFF, 0xFF, 0xFF, 0xE,
	0x68, 0x37, 0x2b, 0x4,
	0x70, 0xa4, 0xb2, 0xC,
	0x6f, 0x3d, 0x86, 0x8,
	0x58, 0x8d, 0x43, 0x4,
	0x35, 0x28, 0x79, 0x4,
	0xb8, 0xc7, 0x6f, 0xC,
	0x6f, 0x4f, 0x25, 0x4,
	0x43, 0x39, 0x00, 0x4,
	0x9a, 0x67, 0x59, 0x8,
	0x44, 0x44, 0x44, 0x4,
	0x6c, 0x6c, 0x6c, 0x8,
	0x9a, 0xd2, 0x84, 0x8,
	0x6c, 0x5e, 0xb5, 0x8,
	0x95, 0x95, 0x95, 0xC
};

uint8 c64d_vicii_pepto_palold_vpl[] = {
	0x00, 0x00, 0x00, 0x0,
	0xff, 0xff, 0xff, 0xe,
	0x58, 0x29, 0x1d, 0x4,
	0x91, 0xc6, 0xd5, 0xc,
	0x91, 0x5c, 0xa8, 0x8,
	0x58, 0x8d, 0x43, 0x4,
	0x35, 0x28, 0x79, 0x4,
	0xb8, 0xc7, 0x6f, 0xc,
	0x91, 0x6f, 0x43, 0x4,
	0x43, 0x39, 0x00, 0x4,
	0x9a, 0x67, 0x59, 0x8,
	0x35, 0x35, 0x35, 0x4,
	0x74, 0x74, 0x74, 0x8,
	0x9a, 0xd2, 0x84, 0x8,
	0x74, 0x66, 0xbe, 0x8,
	0xb8, 0xb8, 0xb8, 0xc
};

uint8 c64d_vicii_rgb_vpl[] = {
	0x00, 0x00, 0x00, 0x0,
	0xFF, 0xFF, 0xFF, 0xE,
	0xFF, 0x00, 0x00, 0x4,
	0x00, 0xFF, 0xFF, 0xC,
	0xFF, 0x00, 0xFF, 0x8,
	0x00, 0xFF, 0x00, 0x4,
	0x00, 0x00, 0xFF, 0x4,
	0xFF, 0xFF, 0x00, 0xC,
	0xFF, 0x80, 0x00, 0x4,
	0x80, 0x40, 0x00, 0x4,
	0xFF, 0x80, 0x80, 0x8,
	0x40, 0x40, 0x40, 0x4,
	0x80, 0x80, 0x80, 0x8,
	0x80, 0xFF, 0x80, 0x8,
	0x80, 0x80, 0xFF, 0x8,
	0xC0, 0xC0, 0xC0, 0xC
};

uint8 c64d_vicii_vice_vpl[] = {
	0x00, 0x00, 0x00, 0x0,
	0xFD, 0xFE, 0xFC, 0xE,
	0xBE, 0x1A, 0x24, 0x4,
	0x30, 0xE6, 0xC6, 0xC,
	0xB4, 0x1A, 0xE2, 0x8,
	0x1F, 0xD2, 0x1E, 0x4,
	0x21, 0x1B, 0xAE, 0x4,
	0xDF, 0xF6, 0x0A, 0xC,
	0xB8, 0x41, 0x04, 0x4,
	0x6A, 0x33, 0x04, 0x4,
	0xFE, 0x4A, 0x57, 0x8,
	0x42, 0x45, 0x40, 0x4,
	0x70, 0x74, 0x6F, 0x8,
	0x59, 0xFE, 0x59, 0x8,
	0x5F, 0x53, 0xFE, 0x8,
	0xA4, 0xA7, 0xA2, 0xC
};

void C64InitPalette()
{
	c64AvailablePalettes.push_back(new C64PaletteData("colodore", c64d_vicii_colodore_vpl));
	c64AvailablePalettes.push_back(new C64PaletteData("PALette", c64d_vicii_PALette_vpl));
	c64AvailablePalettes.push_back(new C64PaletteData("frodo2", c64d_vicii_frodo2_vpl));
	c64AvailablePalettes.push_back(new C64PaletteData("c64hq", c64d_vicii_c64hq_vpl));
	c64AvailablePalettes.push_back(new C64PaletteData("c64s", c64d_vicii_c64s_vpl));
	c64AvailablePalettes.push_back(new C64PaletteData("ccs64", c64d_vicii_ccs64_vpl));
	c64AvailablePalettes.push_back(new C64PaletteData("community colors", c64d_vicii_community_colors_vpl));
	c64AvailablePalettes.push_back(new C64PaletteData("godot", c64d_vicii_godot_vpl));
	c64AvailablePalettes.push_back(new C64PaletteData("pc64", c64d_vicii_pc64_vpl));
	c64AvailablePalettes.push_back(new C64PaletteData("pepto ntsc sony", c64d_vicii_pepto_ntsc_sony_vpl));
	c64AvailablePalettes.push_back(new C64PaletteData("pepto ntsc", c64d_vicii_pepto_ntsc_vpl));
	c64AvailablePalettes.push_back(new C64PaletteData("pepto pal", c64d_vicii_pepto_pal_vpl));
	c64AvailablePalettes.push_back(new C64PaletteData("pepto pal old", c64d_vicii_pepto_palold_vpl));
	c64AvailablePalettes.push_back(new C64PaletteData("rgb", c64d_vicii_rgb_vpl));
	c64AvailablePalettes.push_back(new C64PaletteData("vice", c64d_vicii_vice_vpl));

}

